#!/bin/bash
# SET VARIABLES ===============================================
dir1="/home/pi/scripts/aria4c" # main script dir
dir2="${dir1}/temp" # dir for temp files
#dirmovie="${dir1}/movies" # TESTING PURPOSES *******
#dirtv="${dir1}/tvshows" # TESTING PURPOSES *********
dirmovie="/media/server/movies" # movie dir
dirtv="/media/server/tvshows" # tv dir
file="${dir1}/file" # file where URLs are added
file2="${dir1}/urlsize" # file to download size of download URL
file3="${dir1}/missing" # file to store missing download files
filebackup="${dir1}/file.backup" # back up file that will be created
fileprog="${dir1}/progress" # file that will be updated with progress
# SCRIPT OPTIONS ==============================================
while [ "$1" != "" ] ; # if user input is added (not empty), do this loop
do
	case $1 in # check what the user input is
		-f|--file) # for this...
			sudo nano +100 ${file} # open the URL file
			exit ;; # then stop the script
		-h|--help) # for this, display the help dialogue
			printf "aria4c is a script that uses aria2c to download media files and move them to the appropriate directory.
-SYNTAX---- $: aria4c [OPTIONS]
	--OPTIONS-------------------------------------
	-h (--help)		Display this help
	-f (--file)		Open the URL file to be edited
	-q (--quiet)		Run script in background with no output
	-p (--showprogress)	Display an update on download progress
				Only works when running script in quiet mode
	--showmissing		Show files not downloaded in the last run
	-k (--kill)		This will stop the currently running script
"
			exit ;; # then stop the script
		-q|--quiet) # for this
			quietopt="y" ;; # turn on the quiet option
		-p|--showprogress) # for this
			cat ${fileprog} | tail -2 # display the progress file
			exit ;; # then stop the script
		--showmissing) # for this
			if [ -f ${file3} ] ; then # check if the missing file exists
				echo "Files not downloaded:" # if it does, display this
				cat ${file3} # then display the file contents
			else # if the file doesnt exist
				echo "No missing files." # display this
			fi
			exit ;; # then stop the script
		-k|--kill)
			processsum=$(ps aux | grep aria4c | wc -l)
			for i in $(seq 1 $processsum); do
				processid=$(ps aux | grep aria4c | awk -v i=$i 'FNR == i {print $2}')
				sudo kill -9 $processid > /dev/null 2>&1
			done
			exit ;;
		*) # for anything else
			echo "Invalid option. Use -h or --help for help." # display this
			exit ;; # then stop the script
	esac
	shift # move on to the next position of user input so that multiple options can be used simultaneously
done
# SET UP =====================================================
function setup {
	userid=$(whoami) # identify user
	sudo mkdir -p ${dir1} ${dir2} ${dirmovie} ${dirtv} && sudo chmod 777 ${dir1} ${dir2} ${dirmovie} ${dirtv} && sudo chown $userid:$userid ${dir1} ${dir2} ${dirmovie} ${dirtv}
	# create dir that dont exist and edit permissions
	sudo touch ${file} || exit # create the files if they dont exist
	sudo touch ${filebackup} || exit
	sudo touch ${fileprog} || exit
	sudo chmod 777 ${file} ${filebackup} ${fileprog} && sudo chown $userid:$userid ${file} ${filebackup} ${fileprog}
	if [ -f ${file3} ] ; then
		sudo rm ${file3}
	fi
}
# MAKE NEW FILE ==============================================
function newfile {
	sudo rm -f ${filebackup} # remove back up file if it exists
	sudo mv ${file} ${filebackup} # copy current URL file to backupfile
	touch ${file} # create new blank URL file
	sudo chmod 777 ${file} && sudo chown $userid:$userid ${file} # edit permissions
	echo "***USE UNDERSCORES, NOT SPACES*****************************************" >> ${file}
	echo " FILE TYPE  | MOVIE TITLE/ | MOVIE YEAR/    | MOVIE URL/  | [BLANK]/   " >> ${file}
	echo " (movie/tv) | TV SHOW NAME | TV SHOW SEASON | TV SHOW EP. | TV SHOW URL" >> ${file}
	echo "-----------------------------------------------------------------------" >> ${file}
	# create new URL file with these column headers
	sudo rm -r ${dir2}
}
# MAIN SCRIPT ================================================
function mainscript {
	if [ $(cat ${file} | wc -l) -le 4 ] ; then # if the line count in the URL file is less than the headers, it means its empty, so...
		echo "No URLs detected. Quitting..." # show this
		exit 1 # and quit the script
	fi
	i="4" # tell the loop to start at line 4
	while : # run an infinite loop
	do
		i=$((i+1)) # move to the next line
		if [ $i -gt $(cat ${file} | wc -l) ] ; then # if the line number is greater than the number of lines in the URL file...
			break # exit the loop
		fi
		col1=$(cat ${file} | awk -v i=$i 'FNR == i {print $1}') # assign variables
		col2=$(cat ${file} | awk -v i=$i 'FNR == i {print $2}')
		col3=$(cat ${file} | awk -v i=$i 'FNR == i {print $3}')
		col4=$(cat ${file} | awk -v i=$i 'FNR == i {print $4}')
		col5=$(cat ${file} | awk -v i=$i 'FNR == i {print $5}')
		datevar=$(date +%m/%d/%y\ %H:%M:%S) # get the current date/time
		if [[ "$col1" = "movie" ]] ; then # if its a movie
			title=$(echo $col2 | sed 's/_/ /g') # movie name
			year=$col3 # movie year
			url=$col4 # movie url
			dir=${dirmovie} # directory for movies
			output="${title} (${year}).mp4"
			display=$(echo "($((i-4))/$(($(cat ${file} | wc -l)-4))) Downloading $title ($year) [movie]... [${datevar}]")
		elif [[  "$col1" = "tv" ]] ; then # if its a tv show
			show=$col2 # show title
			season=$col3 # show season
			episode=$col4 # show episode
			url=$col5 # show url
			dir="${dirtv}/${show}/Season_${season}" # directory based on show and season
			sudo mkdir -p ${dir} && sudo chmod 777 ${dir} && sudo chown $userid:$userid ${dir}
			# create the show directory and edit permissions if it doesnt already exist
			output="$(echo ${show} | sed 's/_//g') - s${season}e${episode}.mp4" # output for file to be created
			display=$(echo "($((i-4))/$(($(cat ${file} | wc -l)-4))) Downloading $(echo ${show} | sed 's/_/ /g') Season ${season} Episode ${episode} [tv]... [${datevar}]")
		else # if its neither a movie or a tvshow
			echo "File type not recognized. Skipping line $((i-4))..."
			continue # then move on to the next line
		fi
		> ${fileprog}
		echo "$display" >> ${fileprog}
		if [ "$quietopt" != "y" ] ; then
			tac ${fileprog} | sed -n '1p'
		fi
		aria2c -q --file-allocation=none -d "${dir}" -o "${output}" "${url}" &
		pid=$!
		trap "kill $pid 2> /dev/null" EXIT
		wget "$url" --spider -o ${file2}
		totalsize=$(awk '/Length/ {print $2}' $file2)
		sudo rm $file2
		echo "" >> ${fileprog}
		while kill -0 $pid 2> /dev/null; do
			sleep 10
			size=$(wc -c < "${dir}/${output}")
			percent=$(awk -v size=$size -v totalsize=$totalsize 'BEGIN { print (size / totalsize) * 100 }' | awk '{printf("%.2f\n", $1)}')
			sed -i '$ d' ${fileprog}
			echo "PROGRESS : ${percent}%" >> ${fileprog}
			if [ "$quietopt" != "y" ] ; then
				echo -n -e "\033[2K\r"
				echo -n "$(tac ${fileprog} | sed -n '1p')"
			fi
		done
		if [ "$quietopt" != "y" ] ; then
			echo ""
		fi
		if [ ! -f "${dir}/${output}" ] ; then
			sudo echo "$output" >> ${file3}
		fi
	done
sum=$(($(cat ${file} | wc -l)-4))
if [ -s ${file3} ] ; then
	sum2=$(cat ${file3} | wc -l)
	downloaded=$((${sum}-${sum2}))
	echo "==| SUMMARY |===================================" >> ${fileprog}
	echo " DOWNLOADED ${downloaded}/${sum} FILES (--showmissing to see files not downloaded)" >> ${fileprog}
else
	downloaded=$sum
	echo "==| SUMMARY |===================================" >> ${fileprog}
	echo " DOWNLOADED ${downloaded}/${sum} FILES" >> ${fileprog}
fi
if [ "$quietopt" != "y" ] ; then
	cat ${fileprog} | tail -2
fi
newfile
}
setup # run the setup fx (create directories, edit permissions, create files)
if [ "$quietopt" = "y" ] ; then
	mainscript &
else
	mainscript
fi
