#!/bin/bash
# ============= FUNCTIONS =====================================================================
function help { # script information and help dialogue
printf "DanFMr (v2) is the updated version of DanFMr.
Its function is to download the audio from YouTube videos and sort it accordingly.
-SYNTAX---- $: danfmr2 [-options]
	--OPTIONS--------------------------------
	-f (--file)	Open the file of URLs to download
	-h (--help)	Display this help
	-m (--manual)	MANUAL option
			Manually edit metadata info for tracks in designated directory
			Usage: danfmr -m [directory]
		               danfmr -m (this would just default to current directory)
	-t (--topic)	TOPIC option
			Can be used for albums playlists from 'ARTIST - TOPIC' channels
			Do not use if the list of playlists to download is mixed.
	--misc		Go to the misc music folder
"
}
function setvariables { # set default variables and file locations
	. loadcolors
	dir1="/home/pi/scripts/danfmr2" # script directory
	dir2="/home/pi/scripts/danfmr2/temp" # where files will be downloaded
	file="/home/pi/scripts/danfmr2/file" # the file to edit with URLs
	logfile="/home/pi/scripts/danfmr2/log.file" # file to output log
	userid=$(whoami) # user id
	sudo mkdir -p $dir2 # create the temp directory if it doesnt exist
	if [ ! -f $file ] ; then # if the file doesnt exist
		touch $file # create it
	else # if the file does exist
		sudo cp $file ${file}.backup # create a back up copy of it
	fi
	if [ ! -f $logfile ] ; then
		touch $logfile
	else
		sudo rm $logfile && touch $logfile
	fi
	sudo chmod 777 $dir1 $dir2 $file $logfile && sudo chown ${userid}:${userid} $dir1 $dir2 $file $logfile # set permissions
	echo "SETVARIABLES function ::::::::::::" >> $logfile
}
function setips {
	ipsource=$(ifconfig | grep inet | sed -n 1p | awk -F: '{print $2}' | sed 's/  Bcast//g') # figure out the IP address
	ipid=$(whereami)
	if [ "$ipid" = "raspi1" ] ; then
		ipdest="192.168.1.9"
	elif [ "$ipid" = "raspi2" ] ; then
#		echo -n "Input destination IP: "
#		read ipdest
		ipdest="192.168.1.4"
	else
		echo -n "IP name not found. Please input your current IP address: "
		read ipsource
		echo -n "Input destination IP address: "
		read ipdest
		echo -n "Input computer name: (raspi1/raspi2) "
		read ipid
	fi
	echo "SETIPS function ::::::::::::" >> $logfile
	echo "IP ID (ipid): $ipid" >> $logfile
	echo "IP address destination (ipdest): $ipdest" >> $logfile
}
function mainscript {
	rowcount=$(wc -l < $file) # count rows in file
	echo "Row count in file (rowcount): $rowcount" >> $logfile
	sudo rm -r -f $dir2/*
	if [ "$rowcount" -lt 4 ] ; then # if its less than 4
		echo "No URLs detected. Quitting..." # then the file has not been modified
		exit 1 # so the script will quit
	fi
	for i in $(seq 4 $rowcount) ; do # so now this loops through row by row
		echo "Running loop for row (i): $i" >> $logfile
		id=$(cat $file | awk -v i=$i 'FNR == i {print $1}') # assign variables
		echo "Download ID (id): $id" >> $logfile
		url=$(cat $file | awk -v i=$i 'FNR == i {print $2}')
		echo "Download url (url): $url" >> $logfile
		idshow=$(sed 's/_/ /g' <<< $id) # remove underscores to make it pretty
		echo "Download ID (with underscores removed) (idshow): $idshow" >> $logfile
		dir3="${dir2}/${id}"
		echo "Download directory (dir3): $dir3" >> $logfile
		sudo mkdir -p "$dir3" # make a directory for the downloads
		sudo chmod 777 "$dir3" && sudo chown ${userid}:${userid} "$dir3" # change permissions
		wget -q -O "${dir3}/${id}_url" "$url" # download the youtube url
		if [ "$topic" = "y" ] ; then # if the topic option is on, then we can analyze the artist and album from the url
			echo -n -e "Analyzing URL..."
			idartist=$(cat "${dir3}/${id}_url" | grep 'by <a' | sed -n '1p')
			# isolate the lines with artist (grep) then isolate the first line (sed)
			if [[ $idartist == *"VEVO"* ]] ; then # if the artist is a VEVO artist
				idartist=$(echo "${idartist#*>}" | sed 's/.\{8\}$//' | sed 's/\([^[:blank:]]\)\([[:upper:]]\)/\1 \2/g')
				idartist=$(echo "$idartist" | recode html..ascii)
				# remove the last 8 characters then add a space between words
			else # if the artist is not a VEVO artist, then it is a Topic artist
				idartist=$(echo "${idartist#*>}" | sed 's/.\{12\}$//')
				idartist=$(echo "$idartist" | recode html..ascii)
				# so remove the last 12 characters (and the space is already there)
			fi
			echo "Artist from the url (idartist): $idartist" >> $logfile
			idalbum=$(cat "${dir3}/${id}_url" | grep '</title>' | sed -n '1p')
			# isolate the lines with the album (grep) then isolate the first line (sed)
			idalbum=$(echo "${idalbum#*>}" | sed 's/.\{18\}$//') # remove the last 18 characters
			idalbum=$(echo "$idalbum" | recode html..ascii)
			echo "Album from the url (idalbum): $idalbum" >> $logfile
			echo -e "${BLUE}done${NOCOLOR} | Found: ${RED}$idalbum${NOCOLOR} (album) | ${RED}$idartist${NOCOLOR} (artist)" && sleep 1s # display the info found
		else # if the topic option is off
			echo -e "[TOPIC option disabled] Album/Artist info must be entered manually for ${RED}$idshow${NOCOLOR}"
			read -p "Album: " idalbum # enter the album
			read -p "Artist: " idartist # and the artist
		fi
		videocount=$(cat "${dir3}/${id}_url" | grep 'videos</li>' | sed -n '1p') # find the line with the number of videos in the playlist
		videocount=$(echo "${videocount#*</li>}") # refine it
		videocount=$(echo "${videocount%%</li>*}") # refine it
		videocount=$(echo "${videocount:4:${#videocount}-11}") # this will leave just the number
		echo "Video count from the url (videcount): $videocount" >> $logfile
		echo -n -e "Downloading album [${LIGHTGREY}$idshow${NOCOLOR}]..."
		youtube-dl -q --no-warnings --extract-audio --audio-quality 0 --audio-format mp3 -o "${dir3}/%(title)s.%(ext)s" "$url" &
		# Download the youtube videos from the playlist url and extract the audio to mp3
		pid=$! # while the video is downloading, display progress
		trap "kill $pid 2> /dev/null" EXIT # trap us in this loop until the command finishes
		updateinterval="10" # update the progress every 10 seconds
		echo -n -e "\033[2K\r" && echo -n -e "Downloading album [${LIGHTGREY}$idshow${NOCOLOR}]...[${RED}1/${videocount}${NOCOLOR}]" && sleep 30s
		# display a progress placeholder line while the downloader works on preparing the first file
		while kill -0 $pid 2> /dev/null; do # every ten seconds repeat this loop
			sleep $updateinterval
			currentvideocount=$(ls ${dir3}/*.mp3 | wc -l 2> /dev/null) # count how many videos have been downloaded
			echo -n -e "\033[2K\r" && echo -n -e "Downloading album [${LIGHTGREY}$idshow${NOCOLOR}]...[${RED}${currentvideocount}/${videocount}${NOCOLOR}]"
			# and display these with the total videos in the playlist (obtained earlier)
		done
		echo -n -e "\033[2K\r" && echo -e "Downloading album [${LIGHTGREY}$idshow${NOCOLOR}]...${BLUE}done${NOCOLOR}" && sleep 1s
		echo -n -e "Analyzing metadata with ${YELLOW}Beets${NOCOLOR}..."
		sudo id3v2 -a "$idartist" -A "$idalbum" ${dir3}/*.mp3 # assign the artist/album info to the files to make them easier to search
		sudo chmod 777 ${dir3}/* && sudo chown ${userid}:${userid} ${dir3}/* # edit permissions
		sudo rm -f /home/pi/.config/beets/library.db # clear the beets library so that you dont get an error about the tracks already being added
		beet import -C -q "${dir3}/" >/dev/null 2>&1
		# beets import function - this searches for the album, will automatically accept a match if its > 50% match, then adds the album,
		# artist, track, track number info to the files; -C means the files arent copied and are just edited in place; -q means quiet
		item=$(cd ${dir3} && ls -1 *.mp3 | awk -v i=$i 'NR==i')
		metaalbum=$(exiftool "${dir3}/${item}" | sed 's/: /:/g' | awk -F: '$1 ~ "Album" {print $2}') # find the album info for the file
		metaartist=$(exiftool "${dir3}/${item}" | sed 's/: /:/g' | awk -F: '$1 ~ "Band" {print $2}') # find the album artist
		metayear=$(exiftool "${dir3}/${item}" | sed 's/: /:/g' | awk -F: '$1 ~ "Year" {print $2}') # find the year
		if [ $(echo -e "$metaalbum" | wc -l) -gt 1 ] ; then # sometimes beets accidentally puts repeated info over and over in the metadata
		# so this checks to see if the album string contains multiple lines, if it does...
			echo -e "${RED}error${NOCOLOR} | Restarting download..."
			i=$((i-1)) # set line to previous
			continue # and break this run of the loop ; in other words, re try the download
		fi
		if [ "$metayear" = "" ] ; then
			echo -e "${RED}failed${NOCOLOR}" && sleep 1s
			echo -e "${YELLOW}Beets${NOCOLOR} could not find a match for the album. The files will be renamed and transferred to the miscellaneous directory."
		else
			metagenre=$(exiftool "${dir3}/${item}" | sed 's/: /:/g' | awk -F: '$1 ~ "Genre" {print $2}') # find the genre
			echo -e "${BLUE}done${NOCOLOR} | Tags imported for ${RED}${metaalbum} (${metayear}) - ${metaartist}${NOCOLOR}" && sleep 1s
		fi
		echo -n -e "Renaming files..."
		beet move -d "${dir3}/" >/dev/null 2>&1
		# beets move function - this doesnt actually move files, just renames them to tracknumber_Track Title
		itemcount=$(ls ${dir3}/*.mp3 | wc -l) # count the number of track files for the next line
		for i in $(seq 1 $itemcount) ; do # go through the tracks one by one
			item=$(cd ${dir3} && ls -1 *.mp3 | awk -v i=$i 'NR==i') # for each track...
			newitem=$(echo "${item,,}" | sed 's/ /-/g') # change to lowercase and replace spaces with -; new format: tracknumber_track-title
			if [ "$item" != "$newitem" ] ; then
				mv "${dir3}/${item}" "${dir3}/${newitem}" # replace the old file with the new
			fi
		done
		echo -n -e "\033[2K\r" && echo -e "Renaming files...${BLUE}done${NOCOLOR} | ${YELLOW}$itemcount${NOCOLOR} files modified." && sleep 1s
		if [ "$metayear" != "" ] ; then # if the year is not blank, then Beets succeeded in matching the album
			echo -n -e "Analyzing genre..."
			itemgenre=$(cd ${dir3} && id3v2 -l "${newitem}" | grep 'Genre' | grep -o -P '(?<=\().*(?=\))') # find the genre number
			echo -n -e "\033[2K\r" && echo -e "Analyzing genre...${BLUE}done${NOCOLOR} | Genre: ${RED}$metagenre${NOCOLOR}" && sleep 1s
		else # if the year is blank, Beets did not mach the directory
			itemgenre="255" # so set the genre to unknown
			metaartist="$idartist" # set the artist listed on the metadata obtained from the Youtube page
		fi
		genredir=$(cat ${dir1}/genres | awk '{if ($1 == "'$itemgenre'") {print $3}}') # set the directory to send the files to
		artistdir=$(echo "${metaartist,,}" | sed 's/ /_/g' | sed '/\&/and/g') # sets the artist directory, removing spaces
		albumdir=$(echo "${metaalbum,,}" | sed 's/ /_/g' | sed 's|["'\'']||g' | sed 's/ //g' | sed '/\&/and/g') # sets the album directory, removing spaces and quotes
		echo -n "Transferring album to music server..."
		if [ "$metayear" != "" ] ; then # if year is not blank, that means Beets succeeded in matching the album
			sudo mkdir -p "/media/server/music/${genredir}/${artistdir}/${albumdir}_${metayear}"
			sudo mv ${dir3}/*.mp3 /media/server/music/${genredir}/${artistdir}/${albumdir}_${metayear}/
#			dir4="${dir3}/${albumdir}_${metayear}"
#			sudo mkdir -p ${dir4}
#			sudo mv ${dir3}/*.mp3 ${dir4}/
#			sshpass -p 'Mostmasok1stic' rsync -e 'ssh -o StrictHostKeyChecking=no -l pi' -ar --rsync-path='mkdir -p /media/server/music/${genredir}/“${artistdir}”/ && rsync' ${dir4} pi@${ipdest}:/media/server/music/${genredir}/"${artistdir}"/
			# so the files can be transferred, sshpass passes the password to rsync so that it doesnt stall, -e adds a check option so that
			# it doesnt make you verify the receiving servers identitiy, -rsync-path creates the artist directory if its missing
		else # if the year is blank, then Beets did not match the album, so we dont have all the metadata, only the artist and album
			sudo mkdir -p "/media/server/music/${genredir}/${artistdir}/${albumdir}"
			sudo mv ${dir3}/*.mp3 /media/server/music/${genredir}/${artistdir}/${albumdir}/
#			dir4="${dir3}/${albumdir}_album" # make a directory within the download directory
#			sudo mkdir -p ${dir4}
#			sudo mv ${dir3}/*.mp3 ${dir4}/ # move the mp3 files into this new directory
#			sshpass -p 'Mostmasok1stic' rsync -e 'ssh -o StrictHostKeyChecking=no -l pi' -ar --rsync-path='mkdir -p /media/server/music/${genredir}/”${artistdir}” && rsync' ${dir4} pi@${ipdest}:/media/server/music/${genredir}/”${artistdir}”/
			# do the same sshpass/rsync command as before but transfer files to an artist directory within the misc directory
		fi
		echo -n -e "\033[2K\r" && echo -e "Transferring album to music server...${BLUE}done${NOCOLOR}" && sleep 1s
	done
}
function reloadfile { # recreate original file
	sudo rm $file # remove old file
	echo "==================================================================================
| COLUMN 1: ALBUM NAME (use underscores, not spaces) | COLUMN 2: PLAYLIST URL |
==================================================================================" >> $file # create new one
	sudo chmod 777 $file && sudo chown ${userid}:${userid} $file # change permissions
}
function manualscript { # manually edit metadata
	metafile="${dir1}/metadata" # file with the values to request for metadata
	rowcount=$(wc -l < "${metafile}") # count the rows in the file
	if [ "$targetdir" = "" ] ; then # if nothign has been inputted
		targetdir=$(pwd) # then assume the current directory is the desired directory
	fi
	echo -e -n "Analyzing directory..." && sleep 1s
	trackcount=$(ls ${targetdir}/*.mp3 2>/dev/null | wc -l) # count mp3 files in the directory
	if [ "$trackcount" = "0" ] ; then # if none are found...
		echo -n -e "\033[2K\r" && echo -e "Analyzing directory...${RED}${trackcount}${NOCOLOR} ${YELLOW}files found${NOCOLOR}" && sleep 1s
		echo "Quitting"
		exit 1 # quit
	else # if some are found, display how many
		echo -n -e "\033[2K\r" && echo -e "Analyzing directory...${RED}${trackcount}${NOCOLOR} ${YELLOW}files found${NOCOLOR}"
	fi
	i="1" # set the starting number for the loop
	while : # start an infinite loop
	do
		read -p "$(cat $metafile | awk -F: -v i=$i 'FNR == i {print $1}'): " "$(cat $metafile | awk -F: -v i=$i 'FNR == i {print $2}')"
		# so this goes through the metafile row by row and asks the user for input (album, artist, etc) andt then it saves this input
		# to the variable designated in the metafile
		if [ $(cat $metafile | awk -F: -v i=$i 'FNR == i {print $2}') = "year" ] ; then
			if [[ $year =~ ^[0-9]{4} ]] ; then
				sleep 0
			else
				echo -e "${RED}[ERROR]${NOCOLOR} Not a valid year. Try again..." && sleep 1s
				continue
			fi
		fi
		if [ "$i" = "$rowcount" ] ; then # if the loop number is the same as the number of rows in the metafile
			break # then exit the loop
		fi
		i=$((i + 1)) # otherwise, add 1 to the loop number and run again (i.e. move onto the next row of the metafile)
	done
	echo -n -e "Finding genre for ${YELLOW}${albumartist}${NOCOLOR}..." # now to figure out the genre
	albumartisturl=$(echo ${albumartist,,} | sed 's/ /+/g' | sed 's/_/+/g') # edit the artist to make it last.fm url friendly
	sudo wget -q -O "${targetdir}/${albumartist}_url" "https://www.last.fm/music/${albumartisturl}" # download the url for the artist on last.fm
	genre=$(cat "${targetdir}/${albumartist}_url" | grep -A 5 'itemprop="genre' | head -n 5 | tail -n 1 | awk -F/ '{print $3}' | sed 's/.$//' | sed 's/+/ /g' | sed -e "s/\b\(.\)/\u\1/g")
	# this cuts the html page down to just the genre (the first one listed on the page, at least)
	if [ "$genre" = "" ] ; then # if genre is blank after this..
		echo -e "${RED}failed${NOCOLOR}." # then something went wrong
		read -p "Enter Genre (-l to list): " genre # so a genre must be entered manually
		if [ "$genre" = "-l" ] ; then # this option lists the genres
			printf "%-22s  %-22s  %-22s  %-22s\n" $(cat ${dir1}/genres | awk '{print $2}') | sed 's/_/ /g' | sed -e "s/\b\(.\)/\u\1/g"
			# the printf bit lists them in 4 colums
			read -p "Enter Genre: " genre # so enter the genre based on the list
		fi
	else # if the genre is not blank, then the last.fm bit worked
		echo -e "${BLUE}done${NOCOLOR} | Genre: ${RED}${genre}${NOCOLOR}"
		echo -n -e "Set genre as ${RED}${genre}${NOCOLOR}? (y/n) "
		read genreapprove
		if [ "$genreapprove" = "n" ] ; then
			read -p "Enter Genre (-l to list): " genre # so a genre must be entered manually
			if [ "$genre" = "-l" ] ; then # this option lists the genres
				printf "%-22s  %-22s  %-22s  %-22s\n" $(cat ${dir1}/genres | awk '{print $2}') | sed 's/_/ /g' | sed -e "s/\b\(.\)/\u\1/g"
				# the printf bit lists them in 4 colums
				read -p "Enter Genre: " genre # so enter the genre based on the list
			fi
		fi
	fi
	genrefind=$(echo ${genre,,} | sed 's/ /_/g') # reformat the genre to the format used in the genres list
	genredir=$(cat ${dir1}/genres | grep -e " $genrefind " -e "$genrefind," | awk '{print $3}') # find the directory listed with the genre
	if [ "$genredir" = "" ] ; then # if the directory did not load, then the genre is not in the list
		while : # so run this infinite loop
		do
			echo -e "${RED}[ERROR]${NOCOLOR} | Invalid genre entered" && sleep 2s # first display the error message
			printf "%-22s  %-22s  %-22s  %-22s\n" $(cat ${dir1}/genres | awk '{print $2}') | sed 's/_/ /g' | sed -e "s/\b\(.\)/\u\1/g"
			# then print the genres and ask for the user pick one
			read -p "Please select a valid genre from the list: " genre
			genrefind=$(echo ${genre,,} | sed 's/ /_/g') # reformat the genre again
			genredir=$(cat ${dir1}/genres | grep -e " $genrefind " -e "$genrefind," | awk '{print $3}') # and try to match it to a directory
			if [ "$genredir" = "" ] ; then # if it didnt work, run the loop again
				continue
			else # if it did work, exit the loop
				break
			fi
		done
	fi
	read -p "Do all tracks have the same artist? (y/n) " singleartistopt # find out if this is a single-artist album
	echo -n "Updating tracks..."
	if [[ "$singleartistopt" = "y" ]] ; then
		sudo id3v2 -a "${albumartist}" -A "${album}" -y "${year}" -g "${genre}" --TPE2 "${albumartist}" ${targetdir}/*.mp3
		# add tags for single artist album (i.e. artist and album artist are the same)
	else
		sudo id3v2 -A "${album}" -y "${year}" -g "${genre}" --TPE2 "${albumartist}" ${targetdir}/*.mp3
		# add tags for a multi artist album (i.e. only the album artist is updated)
	fi
	echo -e "${BLUE}done${NOCOLOR} | ${YELLOW}${trackcount}${NOCOLOR} tracks have been updated." && sleep 1s
	i="1"
	while :
	do
		if [ $i -gt $trackcount ] ; then
			break
		fi
		cd ${targetdir} && ls -1 *.mp3 | nl
		echo -n -e "Select track #${i} (use the line number) [ ${RED}B${NOCOLOR}ACK | ${RED}S${NOCOLOR}KIP ] : "
		read tracknumber
		if [ "$tracknumber" = "B" ] && [ "$i" = "1" ] ; then
			continue
		elif [ "$tracknumber" = "B" ] && [ "$i" != "1" ] ; then
			i=$((i-1))
			continue
		elif [ "$tracknumber" = "S" ] ; then
			echo -n "Skip to track #: "
			read skipto
			i=${skipto}
			continue
		else
			while :
			do
				if [[ $tracknumber =~ ^[0-9] ]] ; then
					break
				else
					echo -n -e "${RED}[ERROR]${NOCOLOR} Enter a valid track #: "
					read tracknumber
				fi
			done
		fi
		track=$(ls -1 ${targetdir}/*.mp3 | head -n ${tracknumber} | tail -n 1)
		echo -n -e "Enter Track Title : "
		read tracktitle
		if [ "$singleartistopt" = "y" ] ; then
			sudo id3v2 -t "${tracktitle}" -T ${i}/${trackcount} "${track}"
		else
			echo -n -e "Enter Track Artist [or go ${RED}B${NOCOLOR}ACK] : "
			read trackartist
			if [ "$trackartist" = "B" ] && [ "$i" = "1" ] ; then
				continue
			elif [ "$trackartist" = "B" ] && [ "$i" != "1" ] ; then
				i=$((i-1))
				continue
			fi
			sudo id3v2 -a "${trackartist}" -t "${tracktitle}" -T ${i}/${trackcount} "${track}"
		fi
		echo -n "Updating track..."
		tracktitlerev=$(echo ${tracktitle,,} | sed 's/ /-/g')
		tracknumberrev=$(printf "%02d" $i)
		if [ "${track}" != "${targetdir}/${tracknumberrev}_${tracktitlerev}".mp3 ] ; then
			sudo mv "${track}" "${targetdir}/${tracknumberrev}_${tracktitlerev}".mp3
		fi
		echo -e "${BLUE}done${NOCOLOR} | Track ${YELLOW}${i}${NOCOLOR} has been updated."
		if [ "$i" = "$trackcount" ] ; then
			break
		fi
		i=$((i + 1))
	done
	echo -n "Moving files..."
	albumartistdir=$(echo ${albumartist,,} | sed 's/ /_/g')
	albumdir=$(echo ${album,,} | sed 's/ /_/g')
	if [ "$ipid" = "raspi2" ] ; then
		sudo mkdir -p /media/server/music/${genredir}/"${albumartistdir}"/"${albumdir}"_${year}
		sudo mv "$targetdir"/*.mp3 /media/server/music/${genredir}/"${albumartistdir}"/"${albumdir}"_${year}/
	fi
#		sshpass -p 'Mostmasok1stic' rsync -e 'ssh -o StrictHostKeyChecking=no -l pi' -rR ${dir4} pi@192.168.1.3:/media/server/music/${genredir}/${artistdir}/
	echo -e "${BLUE}done${NOCOLOR}"
}
# ============== SCRIPT OPTIONS ================================================================
setvariables # function that sets default variables
while [ "$1" != "" ] ;
do
	case $1 in
		-f|--file)
			sudo nano +100 $file
			exit ;;
		-h|--help)
			help
			exit ;;
		-m|--manual)
			shift
			if [[ "$1" == "" ]] ; then
				targetdir=$(pwd)
				setips
				manualscript
				exit
			elif [[ "$1" == "-"* ]] ; then
				targetdir=$(pwd)
				setips
				manualscript
				continue
			else
				targetdir="$1"
				setips
				manualscript
				exit
			fi
			;;
		-t|--topic)
			topic="y" ;;
		--misc)
			cd /media/server/music/misc
			exit ;;
		*)
			echo "Invalid option. See help (-h)."
			exit ;;
	esac
	shift
done
# ============== ACTUAL SCRIPT ================================================================
setips # set IP addresses
mainscript # function that downloads files, modifies them, and moves them
reloadfile # function that deletes created URL file and creates a new one
